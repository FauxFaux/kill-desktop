#!/usr/bin/env python3

import argparse
import os
import subprocess
from concurrent.futures import thread

import Xlib.X
import Xlib.display as xdisplay
import Xlib.protocol.event as xevent
import time
from Xlib import Xatom


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-n', '--no-act', action='store_true')
    args = parser.parse_args()

    display = xdisplay.Display()
    client_list = display.get_atom('_NET_CLIENT_LIST')
    wm_pid = display.get_atom('_NET_WM_PID')

    wm_proto = display.get_atom('WM_PROTOCOLS')
    wm_delete = display.get_atom('WM_DELETE_WINDOW')

    pids = set()

    for screen_no in range(display.screen_count()):
        screen = display.screen(screen_no)
        root = screen.root
        clients = root.get_property(client_list, Xatom.WINDOW, 0, 1_000)
        if not clients:
            print('Unsupported window manager? _NET_CLIENT_LIST absent')
            continue

        for window_id in clients.value:
            window = display.create_resource_object('window', window_id)
            pid_response = window.get_property(wm_pid, Xatom.CARDINAL, 0, 2)
            if not pid_response:
                print('A window seems to lack a pid: {}: {}'.format(window.get_wm_class(), window))
                pid = None
            elif 1 != len(pid_response.value):
                print('A window has the wrong number of pids: {}: {}'.format(window.get_wm_class(), window))
                pid = None
            else:
                pid = pid_response.value[0]

            pids.add((pid, window.get_wm_class(), window))

            # for atom in screen.root.list_properties():
            #     print("{}: {}".format(atom, display.get_atom_name(atom)))

    if args.no_act:
        print('Victims:')
        for pid, claz, _ in pids:
            if pid:
                print('{:-8} {}: {}'.format(pid, *claz))
            else:
                print(' NAUGHTY {}: {}'.format(pid, *claz))
        return

    if False:
        # this just doesn't work at all
        for pid, _, win in pids:
            win.send_event(xevent.ClientMessage(
                window=win,
                client_type=wm_proto,
                data=(32, (wm_delete, Xlib.X.CurrentTime, 0, 0, 0))))

    for _, claz, win in pids:
        if 'term' in claz[0]:
            continue

        subprocess.check_output(['i3-msg', '[id="{}"] kill'.format(win.id)])

    count = 10
    for pid, claz, win in pids:
        if 'term' in claz[0]:
            print('ignored terminal: {}: {}'.format(*claz))
            continue

        wait_exit(10, pid, claz)

    for pid, claz, _ in pids:
        if not exists(pid):
            continue

        if 'term' in claz[0]:
            print('ignored terminal: {}: {}'.format(*claz))
            continue

        while True:
            print()
            print('Still alive: {} {}: {}'.format(pid, *claz))
            resp = input('Stop the process before rebooting? [Y/n/^C]: ')
            if '' == resp or 'Y' == resp or 'y' == resp:
                os.kill(pid, 3)
                if wait_exit(10, pid, claz):
                    break
            else:
                break


def wait_exit(count, pid, claz) -> bool:
    for i in range(count):
        if not exists(pid):
            return True

        print('Waiting {}/{} for {} {} {}...'.format(i + 1, count, pid, *claz))
        time.sleep(1)

    return False


def exists(pid) -> bool:
    try:
        os.kill(pid, 0)
        return True
    except:
        return False


if __name__ == '__main__':
    main()
